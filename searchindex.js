Search.setIndex({"alltitles": {"Indices and tables": [[6, "indices-and-tables"]], "Submodules": [[0, "submodules"]], "Welcome to cfx-address\u2019s documentation!": [[6, null]], "cfx_address": [[7, null]], "cfx_address package": [[0, null]], "cfx_address.address module": [[1, null]], "cfx_address.base32 module": [[2, null]], "cfx_address.consts module": [[3, null]], "cfx_address.types module": [[4, null]], "cfx_address.utils module": [[5, null]]}, "docnames": ["cfx_address", "cfx_address.address", "cfx_address.base32", "cfx_address.consts", "cfx_address.types", "cfx_address.utils", "index", "modules"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["cfx_address.rst", "cfx_address.address.rst", "cfx_address.base32.rst", "cfx_address.consts.rst", "cfx_address.types.rst", "cfx_address.utils.rst", "index.rst", "modules.rst"], "indexentries": {"__eq__() (cfx_address.address.base32address method)": [[1, "cfx_address.address.Base32Address.__eq__", false]], "__eq__() (cfx_address.base32address method)": [[0, "cfx_address.Base32Address.__eq__", false]], "abbr (cfx_address.address.base32address property)": [[1, "cfx_address.address.Base32Address.abbr", false]], "abbr (cfx_address.base32address property)": [[0, "cfx_address.Base32Address.abbr", false]], "address_type (cfx_address.address.base32address property)": [[1, "cfx_address.address.Base32Address.address_type", false]], "address_type (cfx_address.base32address property)": [[0, "cfx_address.Base32Address.address_type", false]], "address_type (cfx_address.types.base32addressparts attribute)": [[4, "cfx_address.types.Base32AddressParts.address_type", false]], "base32address (class in cfx_address)": [[0, "cfx_address.Base32Address", false]], "base32address (class in cfx_address.address)": [[1, "cfx_address.address.Base32Address", false]], "base32addressmeta (class in cfx_address.address)": [[1, "cfx_address.address.Base32AddressMeta", false]], "base32addressparts (class in cfx_address.types)": [[4, "cfx_address.types.Base32AddressParts", false]], "calculate_mapped_evm_space_address() (cfx_address.address.base32address class method)": [[1, "cfx_address.address.Base32Address.calculate_mapped_evm_space_address", false]], "calculate_mapped_evm_space_address() (cfx_address.base32address class method)": [[0, "cfx_address.Base32Address.calculate_mapped_evm_space_address", false]], "cfx_address": [[0, "module-cfx_address", false]], "cfx_address.address": [[1, "module-cfx_address.address", false]], "cfx_address.base32": [[2, "module-cfx_address.base32", false]], "cfx_address.consts": [[3, "module-cfx_address.consts", false]], "cfx_address.types": [[4, "module-cfx_address.types", false]], "cfx_address.utils": [[5, "module-cfx_address.utils", false]], "compressed_abbr (cfx_address.address.base32address property)": [[1, "cfx_address.address.Base32Address.compressed_abbr", false]], "compressed_abbr (cfx_address.base32address property)": [[0, "cfx_address.Base32Address.compressed_abbr", false]], "decode() (cfx_address.address.base32address class method)": [[1, "cfx_address.address.Base32Address.decode", false]], "decode() (cfx_address.base32address class method)": [[0, "cfx_address.Base32Address.decode", false]], "decode() (in module cfx_address.base32)": [[2, "cfx_address.base32.decode", false]], "decode_to_words() (in module cfx_address.base32)": [[2, "cfx_address.base32.decode_to_words", false]], "default_network_id (cfx_address.address.base32address attribute)": [[1, "cfx_address.address.Base32Address.default_network_id", false]], "default_network_id (cfx_address.address.base32addressmeta property)": [[1, "cfx_address.address.Base32AddressMeta.default_network_id", false]], "default_network_id (cfx_address.base32address attribute)": [[0, "cfx_address.Base32Address.default_network_id", false]], "encode() (in module cfx_address.base32)": [[2, "cfx_address.base32.encode", false]], "encode_base32() (cfx_address.address.base32address class method)": [[1, "cfx_address.address.Base32Address.encode_base32", false]], "encode_base32() (cfx_address.base32address class method)": [[0, "cfx_address.Base32Address.encode_base32", false]], "encode_words() (in module cfx_address.base32)": [[2, "cfx_address.base32.encode_words", false]], "equals() (cfx_address.address.base32address class method)": [[1, "cfx_address.address.Base32Address.equals", false]], "equals() (cfx_address.base32address class method)": [[0, "cfx_address.Base32Address.equals", false]], "eth_checksum_address (cfx_address.address.base32address property)": [[1, "cfx_address.address.Base32Address.eth_checksum_address", false]], "eth_checksum_address (cfx_address.base32address property)": [[0, "cfx_address.Base32Address.eth_checksum_address", false]], "eth_eoa_address_to_cfx_hex() (in module cfx_address)": [[0, "cfx_address.eth_eoa_address_to_cfx_hex", false]], "eth_eoa_address_to_cfx_hex() (in module cfx_address.utils)": [[5, "cfx_address.utils.eth_eoa_address_to_cfx_hex", false]], "from_public_key() (cfx_address.address.base32address class method)": [[1, "cfx_address.address.Base32Address.from_public_key", false]], "from_public_key() (cfx_address.base32address class method)": [[0, "cfx_address.Base32Address.from_public_key", false]], "get_base32_address_factory() (in module cfx_address.address)": [[1, "cfx_address.address.get_base32_address_factory", false]], "hex_address (cfx_address.address.base32address property)": [[1, "cfx_address.address.Base32Address.hex_address", false]], "hex_address (cfx_address.base32address property)": [[0, "cfx_address.Base32Address.hex_address", false]], "hex_address (cfx_address.types.base32addressparts attribute)": [[4, "cfx_address.types.Base32AddressParts.hex_address", false]], "is_valid_base32() (cfx_address.address.base32address class method)": [[1, "cfx_address.address.Base32Address.is_valid_base32", false]], "is_valid_base32() (cfx_address.base32address class method)": [[0, "cfx_address.Base32Address.is_valid_base32", false]], "is_valid_base32() (in module cfx_address.utils)": [[5, "cfx_address.utils.is_valid_base32", false]], "mapped_evm_space_address (cfx_address.address.base32address property)": [[1, "cfx_address.address.Base32Address.mapped_evm_space_address", false]], "mapped_evm_space_address (cfx_address.base32address property)": [[0, "cfx_address.Base32Address.mapped_evm_space_address", false]], "module": [[0, "module-cfx_address", false], [1, "module-cfx_address.address", false], [2, "module-cfx_address.base32", false], [3, "module-cfx_address.consts", false], [4, "module-cfx_address.types", false], [5, "module-cfx_address.utils", false]], "network_id (cfx_address.address.base32address property)": [[1, "cfx_address.address.Base32Address.network_id", false]], "network_id (cfx_address.base32address property)": [[0, "cfx_address.Base32Address.network_id", false]], "network_id (cfx_address.types.base32addressparts attribute)": [[4, "cfx_address.types.Base32AddressParts.network_id", false]], "public_key_to_cfx_hex() (in module cfx_address)": [[0, "cfx_address.public_key_to_cfx_hex", false]], "public_key_to_cfx_hex() (in module cfx_address.utils)": [[5, "cfx_address.utils.public_key_to_cfx_hex", false]], "shorten_base32_address() (cfx_address.address.base32address class method)": [[1, "cfx_address.address.Base32Address.shorten_base32_address", false]], "shorten_base32_address() (cfx_address.base32address class method)": [[0, "cfx_address.Base32Address.shorten_base32_address", false]], "starts_with_net() (in module cfx_address.types)": [[4, "cfx_address.types.starts_with_net", false]], "validate() (cfx_address.address.base32address class method)": [[1, "cfx_address.address.Base32Address.validate", false]], "validate() (cfx_address.base32address class method)": [[0, "cfx_address.Base32Address.validate", false]], "validate_address_agaist_network_id() (in module cfx_address.utils)": [[5, "cfx_address.utils.validate_address_agaist_network_id", false]], "validate_base32() (in module cfx_address)": [[0, "cfx_address.validate_base32", false]], "validate_base32() (in module cfx_address.utils)": [[5, "cfx_address.utils.validate_base32", false]], "validate_hex_address() (in module cfx_address.utils)": [[5, "cfx_address.utils.validate_hex_address", false]], "validate_network_id() (in module cfx_address.utils)": [[5, "cfx_address.utils.validate_network_id", false]], "verbose_address (cfx_address.address.base32address property)": [[1, "cfx_address.address.Base32Address.verbose_address", false]], "verbose_address (cfx_address.base32address property)": [[0, "cfx_address.Base32Address.verbose_address", false]], "zero_address() (cfx_address.address.base32address class method)": [[1, "cfx_address.address.Base32Address.zero_address", false]], "zero_address() (cfx_address.base32address class method)": [[0, "cfx_address.Base32Address.zero_address", false]]}, "objects": {"": [[0, 0, 0, "-", "cfx_address"]], "cfx_address": [[0, 1, 1, "", "Base32Address"], [1, 0, 0, "-", "address"], [2, 0, 0, "-", "base32"], [3, 0, 0, "-", "consts"], [0, 5, 1, "", "eth_eoa_address_to_cfx_hex"], [0, 5, 1, "", "public_key_to_cfx_hex"], [4, 0, 0, "-", "types"], [5, 0, 0, "-", "utils"], [0, 5, 1, "", "validate_base32"]], "cfx_address.Base32Address": [[0, 2, 1, "", "__eq__"], [0, 3, 1, "", "abbr"], [0, 3, 1, "", "address_type"], [0, 2, 1, "", "calculate_mapped_evm_space_address"], [0, 3, 1, "", "compressed_abbr"], [0, 2, 1, "", "decode"], [0, 4, 1, "", "default_network_id"], [0, 2, 1, "", "encode_base32"], [0, 2, 1, "", "equals"], [0, 3, 1, "", "eth_checksum_address"], [0, 2, 1, "", "from_public_key"], [0, 3, 1, "", "hex_address"], [0, 2, 1, "", "is_valid_base32"], [0, 3, 1, "", "mapped_evm_space_address"], [0, 3, 1, "", "network_id"], [0, 2, 1, "", "shorten_base32_address"], [0, 2, 1, "", "validate"], [0, 3, 1, "", "verbose_address"], [0, 2, 1, "", "zero_address"]], "cfx_address.address": [[1, 1, 1, "", "Base32Address"], [1, 1, 1, "", "Base32AddressMeta"], [1, 5, 1, "", "get_base32_address_factory"]], "cfx_address.address.Base32Address": [[1, 2, 1, "", "__eq__"], [1, 3, 1, "", "abbr"], [1, 3, 1, "", "address_type"], [1, 2, 1, "", "calculate_mapped_evm_space_address"], [1, 3, 1, "", "compressed_abbr"], [1, 2, 1, "", "decode"], [1, 4, 1, "", "default_network_id"], [1, 2, 1, "", "encode_base32"], [1, 2, 1, "", "equals"], [1, 3, 1, "", "eth_checksum_address"], [1, 2, 1, "", "from_public_key"], [1, 3, 1, "", "hex_address"], [1, 2, 1, "", "is_valid_base32"], [1, 3, 1, "", "mapped_evm_space_address"], [1, 3, 1, "", "network_id"], [1, 2, 1, "", "shorten_base32_address"], [1, 2, 1, "", "validate"], [1, 3, 1, "", "verbose_address"], [1, 2, 1, "", "zero_address"]], "cfx_address.address.Base32AddressMeta": [[1, 3, 1, "", "default_network_id"]], "cfx_address.base32": [[2, 5, 1, "", "decode"], [2, 5, 1, "", "decode_to_words"], [2, 5, 1, "", "encode"], [2, 5, 1, "", "encode_words"]], "cfx_address.types": [[4, 1, 1, "", "Base32AddressParts"], [4, 5, 1, "", "starts_with_net"]], "cfx_address.types.Base32AddressParts": [[4, 4, 1, "", "address_type"], [4, 4, 1, "", "hex_address"], [4, 4, 1, "", "network_id"]], "cfx_address.utils": [[5, 5, 1, "", "eth_eoa_address_to_cfx_hex"], [5, 5, 1, "", "is_valid_base32"], [5, 5, 1, "", "public_key_to_cfx_hex"], [5, 5, 1, "", "validate_address_agaist_network_id"], [5, 5, 1, "", "validate_base32"], [5, 5, 1, "", "validate_hex_address"], [5, 5, 1, "", "validate_network_id"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "terms": {"0x": [0, 1], "0x1": [0, 5], "0x143d2a93e97245e290fee74276a1ef8d275be646": [0, 5], "0x152d251c36aec31072b90a85b95bf9435b07edb8": [0, 5], "0x1ecde7223747601823f7535d7968ba98b4881e09": [0, 1], "0x349f086998cf4a0c5a00b853a0e93239d81a97f6": [0, 1], "0xd43d2a93e97245e290fee74276a1ef8d275be646": [0, 5], "0xdacdaeba8e391e7649d3ac4b5329ca0e202d38facd928d88b5f729b89a497e43cc4ad3816fcfdb241497b3b43862afb4c899bc284bf60feca4ee66ff868d1feb": [0, 1, 5], "1": [0, 1, 5], "1029": [0, 1, 5], "2": [0, 1], "37": [0, 1], "39": [0, 5], "3vpu": [0, 1], "5": [0, 1], "7131": [0, 1], "7ggp3vpu": [0, 1], "90": [0, 1], "95j4": [0, 1], "For": [0, 1], "In": [0, 5], "It": [0, 1], "Not": [0, 1], "The": [0, 1], "__eq__": [0, 1, 7], "_address": [0, 1], "_from_trust": [0, 1], "_ignore_invalid_typ": [0, 1], "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0sfbnjm2": [0, 1], "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6f0vrcsw": [0, 1], "aamw4kj6g41pgedw1efjnsm59fbz0b9r1awbp8k2p2": [0, 1], "aat": [0, 1], "aatp533cg7d0agbd87kz48nj1mpnkca8be1rz695j4": [0, 1], "aatp533cg7d0agbd87kz48nj1mpnkca8be7ggp3vpu": [0, 1], "abbr": [0, 1, 7], "abbrevi": [0, 1], "accept": 5, "accept_hex": 5, "account": [0, 1], "add": 1, "address": [0, 5, 7], "address1": [0, 1], "address2": [0, 1], "address_": [0, 1], "address_typ": [0, 1, 4, 7], "addressnotmatch": 5, "affect": [0, 1], "alia": [0, 1], "an": [0, 1, 5], "ani": [0, 1, 5], "anoth": [0, 1], "api": [0, 1], "ar": [0, 1, 5], "argument": [0, 1, 5], "assert": [0, 1], "b32str": 2, "base": [0, 1, 4], "base32": [0, 1, 5, 7], "base32_address": [0, 1, 5], "base32_address_factori": [0, 1], "base32address": [0, 1, 5, 7], "base32addressmeta": [0, 1, 7], "base32addressnotmatch": 5, "base32addresspart": [0, 1, 4, 7], "begin": [0, 1], "blob": [0, 1], "bool": [0, 1, 5], "buffer": 2, "builtin": [0, 1, 4], "byte": [0, 1, 2, 5], "bytearrai": 2, "calcul": [0, 1], "calculate_mapped_evm_space_address": [0, 1, 7], "call": [0, 1, 5], "can": [0, 1], "case": [0, 1], "cfx": [0, 1, 5], "cfx_util": [0, 1, 5], "cfxtest": [0, 1], "chain": [0, 1], "chang": [0, 1], "check": [0, 1, 5], "checksum": [0, 1], "checksumaddress": [0, 1, 4], "cip": [0, 1], "class": [0, 1, 4], "classmethod": [0, 1], "classvar": [0, 1], "com": [0, 1], "compar": [0, 1], "compress": [0, 1], "compressed_abbr": [0, 1, 7], "conflux": [0, 1, 5], "const": [0, 7], "context": 5, "contract": [0, 1, 4], "convert": [0, 5], "correspond": [0, 5], "correspondign": [0, 5], "could": [0, 1], "creat": [0, 1], "critic": [0, 1], "deal": [0, 1], "decod": [0, 1, 2, 7], "decode_to_word": [0, 2, 7], "default": [0, 1, 5], "default_network_id": [0, 1, 7], "defin": [0, 1], "deprec": [0, 1], "dict": [0, 1], "directli": [0, 1], "document": 1, "doe": 5, "doesn": [0, 1], "don": [0, 1], "e": [0, 1], "either": [0, 1], "els": [0, 1, 5], "encod": [0, 1, 2, 5, 7], "encode_base32": [0, 1, 7], "encode_word": [0, 2, 7], "eoa": [0, 5], "eoa_address": [0, 5], "equal": [0, 1, 5, 7], "error": [0, 1, 5], "eth_checksum_address": [0, 1, 7], "eth_eoa_address_to_cfx_hex": [0, 5, 7], "eth_typ": [0, 1], "ethereum": [0, 1, 5], "evm": [0, 1], "exampl": [0, 1], "exampls": [0, 5], "except": [0, 1, 5], "expect": [0, 1, 5], "fals": [0, 1, 5], "field": [0, 1], "first": [0, 1], "float": [0, 1], "form": [0, 1, 5], "format": [0, 1], "forum": [0, 1], "from": [0, 1, 5], "from_public_kei": [0, 1, 7], "from_trusted_sourc": [0, 1], "fun": [0, 1], "function": [0, 5], "futur": [0, 1], "g": [0, 1], "gener": 1, "get": [0, 1], "get_base32_address_factori": [0, 1, 7], "github": [0, 1], "given": 5, "global": 1, "hex": [0, 1, 5], "hex_address": [0, 1, 4, 5, 7], "hexaddress": [0, 1, 5], "hexadecim": 5, "http": [0, 1], "i": [0, 1, 5], "id": [0, 1, 5], "implement": [0, 1], "import": [0, 1, 5], "index": 6, "influenc": 1, "inherit": [0, 1], "input": [0, 1], "instanc": [0, 1], "int": [0, 1, 2, 4, 5], "integ": [0, 1, 5], "invalid": [0, 1, 4], "invalidaddress": [0, 1], "invalidbase32address": [0, 1, 5], "invalidhexaddress": [0, 5], "invalidnetworkid": [0, 1], "invok": [0, 1], "is_valid_base32": [0, 1, 5, 7], "isinst": [0, 1], "iter": 2, "its": [0, 1], "keccak": [0, 5], "kei": [0, 1, 5], "last": [0, 1, 5], "liter": [0, 1, 4, 5], "mainnet": [0, 1], "map": [0, 1], "mapped_evm_space_address": [0, 1, 7], "master": [0, 1], "md": [0, 1], "mean": [0, 1], "mention": [0, 1], "metaclass": [0, 1], "method": [0, 1], "mode": [0, 1], "modul": [0, 6, 7], "most": [0, 1, 5], "neither": [0, 1], "network": [0, 1, 5], "network_id": [0, 1, 4, 5, 7], "new": [0, 1], "new_default": [0, 1], "none": [0, 1, 5], "nonetyp": [0, 1], "nor": [0, 1], "null": [0, 1, 4], "object": [0, 1], "onli": [0, 1, 5], "option": [0, 1, 5], "packag": 7, "page": 6, "param": [0, 1], "paramet": [0, 1, 5], "pk": [0, 5], "posit": [0, 1, 5], "preform": [0, 1], "present": [0, 1], "process": [0, 1], "properti": [0, 1], "provid": [0, 1], "public": [0, 1, 5], "public_kei": [0, 1, 5], "public_key_to_cfx_hex": [0, 5, 7], "python": [0, 1], "rais": [0, 1, 5], "receiv": [0, 1, 5], "recent": [0, 1, 5], "recommend": [0, 1], "refer": 1, "repres": [0, 1], "represent": [0, 1, 5], "result": [0, 1], "return": [0, 1, 5], "same": [0, 1, 5], "search": 6, "self": [0, 1], "set": [0, 1], "setter": [0, 1], "share": [0, 1], "shorten": [0, 1], "shorten_base32_address": [0, 1, 7], "should": [0, 1, 5], "skip": [0, 1, 5], "so": [0, 1], "space": [0, 1], "special": [0, 1], "specif": 5, "specifi": [0, 1], "standard": [0, 1], "start": [0, 5], "starts_with_net": [0, 4, 7], "step": 5, "str": [0, 1, 2, 5], "string": [0, 1, 5], "submodul": 7, "suppos": [0, 1], "t": [0, 1], "target": [0, 1], "testnet": [0, 1], "text": 5, "thi": [0, 1, 5], "throw": [0, 1], "traceback": [0, 1, 5], "trivial": [0, 1], "true": [0, 1, 5], "two": [0, 1], "type": [0, 1, 5, 7], "typeddict": 4, "union": [0, 1, 5], "unless": [0, 1], "us": [0, 1], "user": [0, 1, 4, 5], "util": [0, 7], "valid": [0, 1, 5, 7], "validate_address_agaist_network_id": [0, 5, 7], "validate_base32": [0, 5, 7], "validate_hex_address": [0, 5, 7], "validate_network_id": [0, 5, 7], "valu": [0, 1, 5], "variabl": [0, 1], "verbos": [0, 1], "verbose_address": [0, 1, 7], "verif": [0, 1], "verifi": [0, 1], "version": [0, 1], "view": [0, 1], "vote": [0, 1], "when": [0, 1, 5], "whether": [0, 1, 5], "which": [0, 1], "while": [0, 1], "word": 2, "x": 4, "zero": [0, 1], "zero_address": [0, 1, 5, 7]}, "titles": ["cfx_address package", "cfx_address.address module", "cfx_address.base32 module", "cfx_address.consts module", "cfx_address.types module", "cfx_address.utils module", "Welcome to cfx-address\u2019s documentation!", "cfx_address"], "titleterms": {"": 6, "address": [1, 6], "base32": 2, "cfx": 6, "cfx_address": [0, 1, 2, 3, 4, 5, 7], "const": 3, "document": 6, "indic": 6, "modul": [1, 2, 3, 4, 5], "packag": 0, "submodul": 0, "tabl": 6, "type": 4, "util": 5, "welcom": 6}})